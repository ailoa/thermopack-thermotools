module test_uv_sutherlandsum
  use hyperdual_mod
  use single_phase
  use uv_theory
  use eoslibinit, only: init_thermo, init_saftvrmie, init_quantum_saftvrmie, init_uv, init_ljs
  use thermopack_constants
  use hardsphere_bmcsl, only: calc_ares_hardsphere_bmcsl
  use saft_interface, only: calcSaftFder_res_nonassoc
  use saftvrmie_containers, only: saftvrmie_eos
  use saftvrmie_hardsphere, only: calc_hardsphere_helmholtzenergy
  use saftvrmie_dispersion, only: calcA1, calcA2, calcA3
  use saftvrmie_interface, only: preCalcSAFTVRMie
  use thermopack_var, only: nc, nce, get_active_eos, base_eos_param, &
    thermo_model, get_active_thermo_model
  use pair_potentials
  use critical, only: calcCriticalTV
  use eosTV, only: pressure, free_energy_tv
  use funit
  implicit none
  public

contains

  @Test
  subroutine test_a1a2a3_mix_mie()
    type(uv_theory_eos) :: eos
    real :: F
    integer :: i,j
    real :: P, T, V, rho, z(2)
    real :: dhs, a0, a1, a2, a3
    type(hyperdual) :: T_r, rho_r
    !type(hyperdual) :: lamr(2), lama(2), sigma(2), epsdivk(2)
    type(hyperdual) :: a_res, delta_a0, delta_a1u, delta_a2u, delta_a3u, delta_b2, delta_b2u, a_hs_res, a_ufrac
    !type(mie_potential_hd) :: mie
    class(base_eos_param), pointer :: act_eos_ptr
    type(hyperdual) :: T_hd, rho_hd, z_hd(2), dhs_hd

    ! Thermodynamic state
    T = 100.0
    V = 1.0e-3
    z(1) = 0.45
    z(2) = 1.0-z(1)
    rho = N_AVOGADRO/V

    call init_saftvrmie("AR,C1","DEFAULT")
    act_eos_ptr => get_active_eos()
    select type(p_eos => act_eos_ptr)
    type is (saftvrmie_eos)
      call preCalcSAFTVRMie(nc,T,V,z,3,p_eos%saftvrmie_var)
      call calc_hardsphere_helmholtzenergy(nc,T,V,z,s_vc=p_eos%saftvrmie_var,a=a0)
      call calcA1(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a1=a1)
      call calcA2(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a2=a2)
      call calcA3(nc,T,V,z, s_vc=p_eos%saftvrmie_var,a3=a3)
    end select

    ACTIVE_MODEL = SAFTVR_SS
    call init_uv(comps="AR,C1", model="uv-mie-bh",parameter_reference="SVRMIE")
    T_hd = T
    z_hd = z
    rho_hd = rho
    act_eos_ptr => get_active_eos()
    select type(p_eos => act_eos_ptr)
    type is (uv_theory_eos)
      call preCalcUVTheory(p_eos,nc,T_hd,z_hd)
      call calc_ares_hardsphere_bmcsl(nc, rho_hd*z_hd, (/p_eos%dhs(1,1), p_eos%dhs(2,2)/), a_hs_res)
      call delta_a1u_b2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a1u, Delta_B2u)
      call delta_a2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a2u)
      call delta_a3u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a3u)
    end select

    @assertEqual(a0, a_hs_res%f0, 1e-10*abs(a0))
    @assertEqual(a1, Delta_a1u%f0*T, 1e-10*abs(a1))
    @assertEqual(a2, Delta_a2u%f0*T**2, 1e-10*abs(a2))
    @assertEqual(a3, Delta_a3u%f0*T**3, 1e-10*abs(a3))

  end subroutine test_a1a2a3_mix_mie


  @Test
  subroutine test_a1a2a3_pure_mie()
    real :: P, T, V, z(1)
    real :: F, y
    real :: a0, a1, a2, a3
    real :: epsdivk, sigma, lamr, dhs
    type(hyperdual) :: T_hd, rho_hd, z_hd(1), dhs_hd, delta_b2u, Delta_B2, delta_a0, a_hs_res
    type(hyperdual) :: delta_a1u, delta_a2u, delta_a3u
    class(base_eos_param), pointer :: act_eos_ptr
    type(thermo_model), pointer :: act_mod_ptr

    ! Thermodynamic state
    T = 100
    V = 1.0e-3
    z = 1.0

    call init_saftvrmie("AR","DEFAULT")
    act_eos_ptr => get_active_eos()
    select type(p_eos => act_eos_ptr)
    type is (saftvrmie_eos)
      call preCalcSAFTVRMie(nc,T,V,z,3,p_eos%saftvrmie_var)
      call calc_hardsphere_helmholtzenergy(nc,T,V,z,s_vc=p_eos%saftvrmie_var,a=a0)
      call calcA1(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a1=a1)
      call calcA2(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a2=a2)
      call calcA3(nc,T,V,z, s_vc=p_eos%saftvrmie_var,a3=a3)
      dhs = p_eos%saftvrmie_var%dhs%d(1,1)
      sigma = p_eos%saftvrmie_param%sigma_ij(1,1)
      epsdivk = p_eos%saftvrmie_param%eps_divk_ij(1,1)
      lamr = p_eos%saftvrmie_param%lambda_r_ij(1,1)
    end select

    call init_uv(comps="AR",model="uv-mie-bh",parameter_reference="SVRMIE")
    act_eos_ptr => get_active_eos()
    select type(p_eos => act_eos_ptr)
    type is (uv_theory_eos)
      epsdivk = p_eos%mie(1,1)%epsdivk%f0
      sigma = p_eos%mie(1,1)%sigma%f0
      lamr = p_eos%mie(1,1)%lamr%f0
      T_hd = T
      z_hd = z
      rho_hd = z_hd(1)/V*N_AVOGADRO
      ACTIVE_MODEL = SAFTVR_SS
      call preCalcUVTheory(p_eos, nc, T_hd, z_hd)
      call calc_ares_hardsphere_bmcsl(nc, rho_hd*z_hd, p_eos%dhs(1,1), a_hs_res)
      call delta_a1u_b2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a1u, Delta_B2u)
      call delta_a2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a2u)
      call delta_a3u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a3u)
    end select

    @assertEqual(a0, a_hs_res%f0, 1e-10*abs(a0))
    @assertEqual(a1, Delta_a1u%f0*T, 1e-10*abs(a1))
    @assertEqual(a2, Delta_a2u%f0*T**2, 1e-10*abs(a2))
    @assertEqual(a3, Delta_a3u%f0*T**3, 1e-10*abs(a3))

  end subroutine test_a1a2a3_pure_mie

  !@Test
  subroutine test_a1a2a3_pure_qmie()
    real :: P, T, V, z(1)
    real :: F, y
    real :: a0, a1, a2, a3
    real :: epsdivk, sigma, lamr, dhs
    type(hyperdual) :: T_hd, rho_hd, z_hd(1), dhs_hd, delta_b2u, Delta_B2, delta_a0, a_hs_res
    type(hyperdual) :: delta_a1u, delta_a2u, delta_a3u
    class(base_eos_param), pointer :: act_eos_ptr
    type(thermo_model), pointer :: act_mod_ptr
    integer :: fh
    character(30) :: ref

    ! Thermodynamic state
    T = 30
    V = 1.0e-3
    z = 1.0

    !VERBOSE = .TRUE.
    do fh=1,2
      if (fh==1) ref = "AASEN2019-FH1"
      if (fh==2) ref = "AASEN2019-FH2"
      call init_quantum_saftvrmie("H2",feynman_hibbs_order=fh,parameter_reference=ref)
      act_eos_ptr => get_active_eos()
      select type(p_eos => act_eos_ptr)
      type is (saftvrmie_eos)
        call preCalcSAFTVRMie(nc,T,V,z,3,p_eos%saftvrmie_var)
        call calc_hardsphere_helmholtzenergy(nc,T,V,z,s_vc=p_eos%saftvrmie_var,a=a0)
        call calcA1(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a1=a1)
        call calcA2(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a2=a2)
        call calcA3(nc,T,V,z, s_vc=p_eos%saftvrmie_var,a3=a3)
        dhs = p_eos%saftvrmie_var%dhs%d(1,1)
        sigma = p_eos%saftvrmie_param%sigma_ij(1,1)
        epsdivk = p_eos%saftvrmie_param%eps_divk_ij(1,1)
        lamr = p_eos%saftvrmie_param%lambda_r_ij(1,1)
      end select

      call init_uv(comps="H2",model="uv-mie-bh",parameter_reference=ref)
      act_eos_ptr => get_active_eos()
      select type(p_eos => act_eos_ptr)
      type is (uv_theory_eos)
        ACTIVE_MODEL = SAFTVR_SS
        call set_sutsum_parameters_from_Qmie(p_eos, nc, FHorder=fh)
        epsdivk = p_eos%sutsum(1,1)%epsdivk%f0
        sigma = p_eos%sutsum(1,1)%sigma%f0
        lamr = p_eos%sutsum(1,1)%lam(1)%f0
        T_hd = T
        z_hd = z
        rho_hd = z_hd(1)/V*N_AVOGADRO
        call preCalcUVTheory(p_eos, nc, T_hd, z_hd)

        call calc_ares_hardsphere_bmcsl(nc, rho_hd*z_hd, p_eos%dhs(1,1), a_hs_res)
        call delta_a1u_b2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a1u, Delta_B2u)
        call delta_a2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a2u)
        call delta_a3u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a3u)
        if (VERBOSE) then
          print *, "dhs      "
          print *, dhs
          print *, p_eos%dhs%f0

          print *, "ahs      "
          print *, a0
          print *,a_hs_res%f0


          print *, "a1       "
          print *, a1
          print *, Delta_a1u%f0*T

          print *, "a2       "
          print *, a2
          print *, Delta_a2u%f0*T**2

          print *, "a3       "
          print *, a3
          print *, Delta_a3u%f0*T**3
        end if

        @assertEqual(dhs, p_eos%dhs%f0, 1e-4*abs(dhs))
        @assertEqual(a0, a_hs_res%f0, 1e-4*abs(a0))
        @assertEqual(a1, Delta_a1u%f0*T, 1e-4*abs(a1))
        @assertEqual(a2, Delta_a2u%f0*T**2, 1e-4*abs(a2))
        @assertEqual(a3, Delta_a3u%f0*T**3, 1e-4*abs(a3))

      end select
    end do
  end subroutine test_a1a2a3_pure_qmie

end module test_uv_sutherlandsum
