module test_uv_sutherlandsum
  use hyperdual_mod
  use single_phase
  use uv_theory
  use eoslibinit, only: init_thermo, init_saftvrmie, init_uv, init_ljs
  use thermopack_constants
  use hardsphere_bmcsl, only: calc_ares_hardsphere_bmcsl
  use saft_interface, only: calcSaftFder_res_nonassoc
  use saftvrmie_containers, only: saftvrmie_eos
  use saftvrmie_hardsphere, only: calc_hardsphere_helmholtzenergy
  use saftvrmie_dispersion, only: calcA1, calcA2, calcA3
  use saftvrmie_interface, only: preCalcSAFTVRMie
  use thermopack_var, only: nc, nce, get_active_eos, base_eos_param, &
    thermo_model, get_active_thermo_model
  use pair_potentials
  use critical, only: calcCriticalTV
  use eosTV, only: pressure, free_energy_tv
  use funit
  implicit none
  public

contains

  @Test
  subroutine test_a1a2a3_mix_mie()
    type(uv_theory_eos) :: eos
    real :: F
    integer :: i,j,knc = 2
    real :: P, T, V, rho, z(2)
    real :: dhs, a0, a1, a2, a3
    type(hyperdual) :: T_r, rho_r
    type(hyperdual) :: lamr(2), lama(2), sigma(2), epsdivk(2)
    type(hyperdual) :: a_res, delta_a0, delta_a1u, delta_a2u, delta_a3u, delta_b2, delta_b2u, phi, a_attr, a_hs_res, a_ufrac
    type(mie_potential_hd) :: mie
    class(base_eos_param), pointer :: act_eos_ptr
    type(hyperdual) :: T_hd, rho_hd, z_hd(2), dhs_hd

    ! Thermodynamic state
    T = 100.0
    V = 1.0e-3
    !T = 1.5*epsdivk(1)
    z(1) = 0.45
    z(2) = 1.0-z(1)
    rho = N_AVOGADRO/V


    print *, "SVRMIE"
    call init_saftvrmie("AR,C1","DEFAULT")
    act_eos_ptr => get_active_eos()
    select type(p_eos => act_eos_ptr)
    type is (saftvrmie_eos)
      call preCalcSAFTVRMie(nc,T,V,z,3,p_eos%saftvrmie_var)
      call calc_hardsphere_helmholtzenergy(nc,T,V,z,s_vc=p_eos%saftvrmie_var,a=a0)
      call calcA1(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a1=a1)
      call calcA2(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a2=a2)
      call calcA3(nc,T,V,z, s_vc=p_eos%saftvrmie_var,a3=a3)
      dhs = p_eos%saftvrmie_var%dhs%d(1,1)
      ! sigma = p_eos%saftvrmie_param%sigma_ij(1,1)
      ! epsdivk = p_eos%saftvrmie_param%eps_divk_ij(1,1)
      ! lamr = p_eos%saftvrmie_param%lambda_r_ij(1,1)
      ! print *, p_eos%saftvrmie_param%sigma_ij
      ! print *, p_eos%saftvrmie_param%eps_divk_ij
      ! print *, p_eos%saftvrmie_param%lambda_r_ij
      ! print *, p_eos%saftvrmie_var%dhs%d
    end select

    print *, "dhs      ", dhs
    print *, "a0       ", a0
    print *, "a1       ", a1
    print *, "a2       ", a2
    print *, "a3       ", a3
    print *, ""

    print *, "UV-THEORY"
    call init_uv(comps="AR,C1", model="uv-mie-bh",parameter_reference="SVRMIE")

    ! sigma = 3.41e-10
    ! !sigma(2) = 2.0
    ! epsdivk = 118.7
    ! !epsdivk(2) = 0.5
    ! lamr = 12.26 ! Avoid activating the LJ-specific parameters
    ! lama = 6.0
    
    T_hd = T
    z_hd = z
    rho_hd = rho
    act_eos_ptr => get_active_eos()
    select type(p_eos => act_eos_ptr)
    type is (uv_theory_eos)
      !call set_mie_parameters(p_eos,nc,lamr,sigma,epsdivk)
      call preCalcUVTheory(p_eos,nc,T_hd,z_hd)
      print *, " "
      call calc_ares_hardsphere_bmcsl(nc, rho_hd*z_hd, (/p_eos%dhs(1,1), p_eos%dhs(2,2)/), a_hs_res)
      print *, "ahs      ", a_hs_res%f0

      call delta_a1u_b2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a1u, Delta_B2u)
      print *, "a0       ", delta_a0%f0 + a_hs_res%f0
      print *, "a1       ", Delta_a1u%f0*T_hd%f0

      call delta_a2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a2u)
      print *, "a2       ", Delta_a2u%f0*T_hd%f0**2

      call delta_a3u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a3u)
      print *, "a3       ", Delta_a3u%f0*T_hd%f0**3
      print *, ""

      ! print *, p_eos%sutsum%sigma%f0
      ! print *, p_eos%sutsum%epsdivk%f0
      ! print *, p_eos%sutsum(1,1)%lam%f0
      ! print *, p_eos%sutsum(1,2)%lam%f0
      ! print *, p_eos%sutsum(2,1)%lam%f0
      ! print *, p_eos%sutsum(2,2)%lam%f0

      
    end select


  end subroutine test_a1a2a3_mix_mie

  
  !@Test
  subroutine test_a1a2a3_pure_mie()
    real :: P, T, V, z(1)
    real :: F, y
    real :: a0, a1, a2, a3
    real :: epsdivk, sigma, lamr, dhs
    type(hyperdual) :: T_hd, rho_hd, z_hd(1), dhs_hd, delta_b2u, Delta_B2, delta_a0, a_hs_res
    type(hyperdual) :: delta_a1u, delta_a2u, delta_a3u
    class(base_eos_param), pointer :: act_eos_ptr
    type(thermo_model), pointer :: act_mod_ptr

    ! Thermodynamic state
    T = 100
    V = 1.0e-3
    z = 1.0

    print *, "SVRMIE"
    call init_saftvrmie("C1","DEFAULT")
    act_eos_ptr => get_active_eos()
    select type(p_eos => act_eos_ptr)
    type is (saftvrmie_eos)
      call preCalcSAFTVRMie(nc,T,V,z,3,p_eos%saftvrmie_var)
      call calc_hardsphere_helmholtzenergy(nc,T,V,z,s_vc=p_eos%saftvrmie_var,a=a0)
      call calcA1(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a1=a1)
      call calcA2(nc,T,V,z, saftvrmie_vc=p_eos%saftvrmie_var,a2=a2)
      call calcA3(nc,T,V,z, s_vc=p_eos%saftvrmie_var,a3=a3)
      dhs = p_eos%saftvrmie_var%dhs%d(1,1)
      sigma = p_eos%saftvrmie_param%sigma_ij(1,1)
      epsdivk = p_eos%saftvrmie_param%eps_divk_ij(1,1)
      lamr = p_eos%saftvrmie_param%lambda_r_ij(1,1)
      print *, epsdivk, sigma, lamr
    end select

    print *, "dhs      ", dhs
    print *, "a0       ", a0
    print *, "a1       ", a1
    print *, "a2       ", a2
    print *, "a3       ", a3
    print *, ""

    print *, "UV-THEORY"
    call init_uv(comps="C1",model="uv-mie-bh",parameter_reference="SVRMIE")
    act_eos_ptr => get_active_eos()
    select type(p_eos => act_eos_ptr)
    type is (uv_theory_eos)
      epsdivk = p_eos%mie(1,1)%epsdivk%f0
      sigma = p_eos%mie(1,1)%sigma%f0
      lamr = p_eos%mie(1,1)%lamr%f0
      T_hd = T
      z_hd = z
      rho_hd = z_hd(1)/V*N_AVOGADRO
      LAFITTE = .true.
      print *, epsdivk, sigma, lamr
      print *, "LAFITTE"
      call preCalcUVTheory(p_eos, nc, T_hd, z_hd)

      call calc_ares_hardsphere_bmcsl(nc, rho_hd*z_hd, p_eos%dhs(1,1), a_hs_res)
      print *, "ahs      ", a_hs_res%f0

      call delta_a1u_b2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a1u, Delta_B2u)
      print *, "a1       ", Delta_a1u%f0*T

      call delta_a2u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a2u)
      print *, "a2       ", Delta_a2u%f0*T**2

      call delta_a3u_sutsum(p_eos, nc, T_hd, rho_hd, z_hd, Delta_a3u)
      print *, "a3       ", Delta_a3u%f0*T**3

      print *, ""
    end select
  end subroutine test_a1a2a3_pure_mie


end module test_uv_sutherlandsum
